package com.accioma.telecosfacturamovil.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.accioma.telecosfacturamovil.model.Authorization;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AUTHORIZATION.
*/
public class AuthorizationDao extends AbstractDao<Authorization, Long> {

    public static final String TABLENAME = "AUTHORIZATION";

    /**
     * Properties of entity Authorization.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ruc_company = new Property(1, String.class, "ruc_company", false, "RUC_COMPANY");
        public final static Property Estab = new Property(2, String.class, "estab", false, "ESTAB");
        public final static Property PtoEmi = new Property(3, String.class, "ptoEmi", false, "PTO_EMI");
        public final static Property NextSecuencial = new Property(4, Integer.class, "nextSecuencial", false, "NEXT_SECUENCIAL");
        public final static Property Padding = new Property(5, Integer.class, "padding", false, "PADDING");
        public final static Property Active = new Property(6, Boolean.class, "active", false, "ACTIVE");
    };


    public AuthorizationDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorizationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AUTHORIZATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RUC_COMPANY' TEXT," + // 1: ruc_company
                "'ESTAB' TEXT," + // 2: estab
                "'PTO_EMI' TEXT," + // 3: ptoEmi
                "'NEXT_SECUENCIAL' INTEGER," + // 4: nextSecuencial
                "'PADDING' INTEGER," + // 5: padding
                "'ACTIVE' INTEGER);"); // 6: active
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AUTHORIZATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Authorization entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ruc_company = entity.getRuc_company();
        if (ruc_company != null) {
            stmt.bindString(2, ruc_company);
        }
 
        String estab = entity.getEstab();
        if (estab != null) {
            stmt.bindString(3, estab);
        }
 
        String ptoEmi = entity.getPtoEmi();
        if (ptoEmi != null) {
            stmt.bindString(4, ptoEmi);
        }
 
        Integer nextSecuencial = entity.getNextSecuencial();
        if (nextSecuencial != null) {
            stmt.bindLong(5, nextSecuencial);
        }
 
        Integer padding = entity.getPadding();
        if (padding != null) {
            stmt.bindLong(6, padding);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(7, active ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Authorization readEntity(Cursor cursor, int offset) {
        Authorization entity = new Authorization( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ruc_company
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // estab
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ptoEmi
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // nextSecuencial
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // padding
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Authorization entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRuc_company(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEstab(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPtoEmi(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNextSecuencial(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPadding(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setActive(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Authorization entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Authorization entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
