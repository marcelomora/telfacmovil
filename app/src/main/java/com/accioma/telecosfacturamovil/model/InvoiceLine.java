package com.accioma.telecosfacturamovil.model;

import com.accioma.telecosfacturamovil.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table INVOICE_LINE.
 */
public class InvoiceLine {

    private Long id;
    private String name;
    private String min;
    private String icc;
    private Float qtty;
    private Float price_unit;
    private Float price_total;
    private Float vatRate;
    private Float amountVat;
    private String description;
    private Long invoiceId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient InvoiceLineDao myDao;

    private Invoice invoice;
    private Long invoice__resolvedKey;


    public InvoiceLine() {
    }

    public InvoiceLine(Long id) {
        this.id = id;
    }

    public InvoiceLine(Long id, String name, String min, String icc, Float qtty, Float price_unit, Float price_total, Float vatRate, Float amountVat, String description, Long invoiceId) {
        this.id = id;
        this.name = name;
        this.min = min;
        this.icc = icc;
        this.qtty = qtty;
        this.price_unit = price_unit;
        this.price_total = price_total;
        this.vatRate = vatRate;
        this.amountVat = amountVat;
        this.description = description;
        this.invoiceId = invoiceId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInvoiceLineDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMin() {
        return min;
    }

    public void setMin(String min) {
        this.min = min;
    }

    public String getIcc() {
        return icc;
    }

    public void setIcc(String icc) {
        this.icc = icc;
    }

    public Float getQtty() {
        return qtty;
    }

    public void setQtty(Float qtty) {
        this.qtty = qtty;
    }

    public Float getPrice_unit() {
        return price_unit;
    }

    public void setPrice_unit(Float price_unit) {
        this.price_unit = price_unit;
    }

    public Float getPrice_total() {
        return price_total;
    }

    public void setPrice_total(Float price_total) {
        this.price_total = price_total;
    }

    public Float getVatRate() {
        return vatRate;
    }

    public void setVatRate(Float vatRate) {
        this.vatRate = vatRate;
    }

    public Float getAmountVat() {
        return amountVat;
    }

    public void setAmountVat(Float amountVat) {
        this.amountVat = amountVat;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getInvoiceId() {
        return invoiceId;
    }

    public void setInvoiceId(Long invoiceId) {
        this.invoiceId = invoiceId;
    }

    /** To-one relationship, resolved on first access. */
    public Invoice getInvoice() {
        Long __key = this.invoiceId;
        if (invoice__resolvedKey == null || !invoice__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InvoiceDao targetDao = daoSession.getInvoiceDao();
            Invoice invoiceNew = targetDao.load(__key);
            synchronized (this) {
                invoice = invoiceNew;
            	invoice__resolvedKey = __key;
            }
        }
        return invoice;
    }

    public void setInvoice(Invoice invoice) {
        synchronized (this) {
            this.invoice = invoice;
            invoiceId = invoice == null ? null : invoice.getId();
            invoice__resolvedKey = invoiceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
